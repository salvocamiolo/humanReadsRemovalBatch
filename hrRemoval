#!/usr/bin/python3
import os,sys
import argparse

parser = argparse.ArgumentParser(description="Remove human reads usin weeMapper")
parser.add_argument("-i","--inputFile",required=True,help="Input file with list of paired end file name")
parser.add_argument("-t","--threads",required=False,help="Number of threads to use")
parser.add_argument("-o","--output_folder",required=True,help="Output folder")
parser.add_argument("-c","--conda_directory",required=True,help="The conda environment path")
parser.add_argument("-b","--bowtie2_index",required=True,help="The human bowtie2 index file ending with .1.bt2")

args = vars(parser.parse_args())
outputFolder = args['output_folder']
condaDir = args['conda_directory']
bowtie2Ref = args['bowtie2_index']

infileName = args['inputFile']
if not args['threads']:
	threads = 1
else:
	threads = args['threads']


i = open(infileName)
os.system("mkdir -p "+outputFolder)
outfile = open("./"+outputFolder+"/summuryStatistics.txt","w")
while True:
	read1 = i.readline().rstrip()
	if not read1:
		break
	read2 = i.readline().rstrip()


	if "fastq" in read1:
		prefix1 = ((read1.replace(".fastq","")).split("/"))[-1]
		prefix2 = ((read2.replace(".fastq","")).split("/"))[-1]
	if "fq" in read1:
		prefix1 = ((read1.replace(".fq","")).split("/"))[-1]
		prefix2 = ((read2.replace(".fq","")).split("/"))[-1]

	print("Removing human reads from sample %s" %prefix1)
	print("Aligning reads of sample %s to human reference...." %prefix1)
	os.system(condaDir+"/bin/bowtie2 --local -x "+bowtie2Ref.replace(".1.bt2","")+" -1 "+read1+" -2 "+read2+" -p "+threads+" -S hostAlignment_140875.sam")
	print("Converting sam to bam")
	os.system(condaDir+"/bin/samtools view -bS -h hostAlignment_140875.sam >hostAlignment_140875.bam")
	print("Extracting unaligned reads....")
	os.system(condaDir+"/bin/bam2fastq --no-aligned --force --strict -o unmapped_140875#.fq hostAlignment_140875.bam")
	print("Calculating number of filtered reads....")
	os.system("wc -l unmapped_140875_1.fq >numReads_140875")
	numreads = open("numReads_140875")
	numberOfReads = int(((numreads.readline().rstrip()).split(" "))[0])/2
	numreads.close()
	print("Calculating number of filtered bases....")
	os.system("cat unmapped_140875_1.fastq | paste - - - - | cut -f 2 | tr -d '\n' | wc -c >baseCount")
	os.system("cat unmapped_140875_2.fastq | paste - - - - | cut -f 2 | tr -d '\n' | wc -c >>baseCount")
	infile = open("baseCount")
	base1 = int(infile.readline().rstrip())
	base2 = int(infile.readline().rstrip())
	infile.close()

	os.system("mv unmapped_140875_1.fq ./"+outputFolder+"/"+prefix1+"_nh_1.fq")
	os.system("mv unmapped_140875_2.fq ./"+outputFolder+"/"+prefix1+"_nh_2.fq")
	os.system("rm -f hostAlignment_140875.*")
	

	

	outfile.write(prefix1+"\t"+numberOfReads+"\t"+str(base1+base2)+"\n")

	os.system("rm -f "+prefix1+"*_log")

outfile.close()